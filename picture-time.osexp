---
API: 2
OpenSesame: 3.0.7b1
Platform: posix
---
set width 1024
set uniform_coordinates yes
set title "Picture Time"
set subject_parity even
set subject_nr 0
set start experiment
set sampler_backend legacy
set mouse_backend xpyriment
set keyboard_backend legacy
set height 768
set foreground white
set font_size 18
set font_italic no
set font_family sans
set font_bold no
set experiment_path "/home/pashultz/Dropbox/picture-time"
set description "Default description"
set coordinates uniform
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend xpyriment
set bidi no
set background black

define form_text_display end_practice
	set timeout infinite
	set spacing 10
	set rows "1;4;1"
	set only_render no
	set ok_text Ok
	set margins "50;50;50;50"
	set form_title "<span size=24>Title</span>"
	set form_text "Your message"
	set description "A simple text display form"
	set cols "1;1;1"
	set _theme gray
	widget 0 0 3 1 label text="[form_title]"
	widget 0 1 3 1 label center=no text="[form_text]"
	widget 1 2 1 1 button text="[ok_text]"


define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run make_slides always
	run instructions always
	run load_images_first always
	run loop1 always
	run end_practice always

define sketchpad image_array
	set duration keypress
	set description "Displays stimuli"
	draw image center=1 file="[image0]" scale=1 show_if=always x=-256 y=-192 z_index=0
	draw image center=1 file="[image1]" scale=1 show_if=always x=256 y=-192 z_index=0
	draw image center=1 file="[image2]" scale=1 show_if=always x=-256 y=192 z_index=0
	draw image center=1 file="[image3]" scale=1 show_if=always x=256 y=192 z_index=0

define form_text_display instructions
	set timeout infinite
	set spacing 10
	set rows "1;4;1"
	set only_render no
	set ok_text Ok
	set margins "50;50;50;50"
	set form_title "<span size=24>Title</span>"
	set form_text "Your message"
	set description "A simple text display form"
	set cols "1;1;1"
	set _theme gray
	widget 0 0 3 1 label text="[form_title]"
	widget 0 1 3 1 label center=no text="[form_text]"
	widget 1 2 1 1 button text="[ok_text]"


define inline_script load_images
	set description "Executes Python code"
	___run__
	# get the next batch of image files
	
	if var.count_seq < (len(var.slide_list) - 1):
	    var.image0 = var.slide_list[var.count_seq+1][0]
	    var.image1 = var.slide_list[var.count_seq+1][1]
	    var.image2 = var.slide_list[var.count_seq+1][2]
	    var.image3 = var.slide_list[var.count_seq+1][3]
	else:
	    # don't bother looking beyond the last slide
	    pass
	__end__
	set _prepare ""

define inline_script load_images_first
	set description "Executes Python code"
	___run__
	# get the next batch of image files
	
	# sketchpad items are generated before the sequence begins, for timing reasons
	# so these variables need to be populated before the sequence begins
	
	var.image0 = var.slide_list[0][0]
	var.image1 = var.slide_list[0][1]
	var.image2 = var.slide_list[0][2]
	var.image3 = var.slide_list[0][3]
	__end__
	set _prepare ""

define loop loop1
	set skip 0
	set repeat 1
	set order random
	set offset no
	set item seq
	set description "Repeatedly runs another item"
	set cycles 12
	set column_order ""
	set break_if never
	run seq

define inline_script make_slides
	set description "Executes Python code"
	___run__
	from random import shuffle
	
	
	def rotate(l, n=1):
	    """returns a list rotated forward by n steps"""
	    return l[n:] + l[:n]
	
	
	def make_slides(cats=["injection", "negative", "neutral", "positive"],
	                trial_length=12,
	                imgformat="bmp"):
	    """Returns a list of lists of filenames, one per slide. Filenames are given in
	    the format {category}-{number}.{imgformat}. Categories are counterbalanced
	    to appear equally in each area of the slide, and each image appears exactly
	    once per trial.
	    """
	
	    # templates is a list of lists of categories, showing how the image types
	    # will be arranged on each slide
	    templates = []
	    # for twelve trials, we'll generate three groups of four slides. If the
	    # trial length isn't divisible by the number of categories, we'll get an
	    # error. Could fix by rounding up instead of down, but for now an error is
	    # probably better.
	    for m in range(int(trial_length/len(cats))):
	        # get four counterbalanced slides by adding all rotations of the
	        # current (random) order of categories
	        shuffle(cats)
	        templates.extend([rotate(cats, n) for n in range(len(cats))])
	
	    # indices is a dictionary of lists, containing the order of images for each
	    # category
	    indices = {}
	    for cat in cats:
	        indices[cat] = list(range(1, 13))
	    [shuffle(indices[cat]) for cat in cats]
	
	    # slides is a list of lists of filenames as strings, in the order in which
	    # they'll appear on the sketchpad.
	    slides = []
	    # Each image is determined by getting the next index value for the
	    # appropriate template.
	    for s in range(trial_length):
	        # a list of filenames for the current slide
	        filenames = []
	        for i in templates[s]:
	            filenames.append("{0}-{1:=02}.bmp".format(i, indices[i][s]))
	        slides.append(filenames)
	
	    return slides
	
	var.slide_list = make_slides()
	
	var.image0 = 'positive-01.bmp'
	var.image1 = 'positive-02.bmp'
	var.image2 = 'positive-03.bmp'
	var.image3 = 'positive-04.bmp'
	__end__
	set _prepare ""

define sequence seq
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run image_array always
	run load_images always

